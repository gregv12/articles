## Velocity Template.
package ${functionPackage};
#foreach( $import in $imports)
import $import;
#end

/**
 * Generated mapper function wrapper for a reference type.
 * <pre>
 *  <ul>
 *      <li>template file: ${currentTemplate}
 *      <li>output class : {@link ${outputClass}}
 *      <li>input class  : {@link ${filterSubjectClass}}
#foreach($sourceInfo in $sourceMappingList)
 *      <li>input class  : {@link ${sourceInfo.type}}
#end
 *      <li>map function : {@link ${targetClass}#${targetMethod}}
 *      <li>multiArg     : ${multiArgFunc}
 *  </ul>
 * <pre>
 * stateful = ${stateful}
 * @author Greg Higgins
 */
public class ${functionClass} extends AbstractFilterWrapper<${outputClass}> {

    public ${sourceClass} filterSubject;
#if(${multiArgFunc})
    private boolean filterSubjectUpdated;
#end
#foreach($sourceInfo in $sourceMappingList)
    public ${sourceInfo.type} ${sourceInfo.id};
#if(!${sourceInfo.constant})
    private boolean ${sourceInfo.id}Updated;
#end
#end
#if(!${newFunction})
    @NoEventReference
    public ${targetClass} f;
#end
    private ${outputClass} result;

    @OnEvent
    public boolean onEvent(){
        boolean updated = true;
        if(recalculate){
            ${outputClass} oldValue = result;
#if(${newFunction})
#if(${multiArgFunc})
            result = ${targetClass}.${targetMethod}(${input});
            if(allSourcesUpdated()){
                result = ${targetClass}.${targetMethod}(${input});
            }
#else
            result = ${targetClass}.${targetMethod}(${input});
#end
#else
#if(${multiArgFunc})
            if(allSourcesUpdated()){
                result = f.${targetMethod}(${input});
            }
#else
            result = f.${targetMethod}(${input});
#end
#foreach($functionInfo in $sourceFunctions)
            if(${functionInfo.sourceInfo.id}Updated){
                result =  f.${targetMethod}(${functionInfo.paramString});
            }
#end
#end
            return #if(${multiArgFunc})allSourcesUpdated() & #end!notifyOnChangeOnly || (!result.equals(oldValue));
        }
        recalculate = true;
        return updated;  
    }
#if(!${newFunction} || ${multiArgFunc} )

#if(${multiArgFunc})
    private boolean allSourcesUpdated(){
        boolean updated = filterSubjectUpdated;
#foreach($sourceInfo in $sourceMappingList)
#if(!${sourceInfo.constant})
        updated &= ${sourceInfo.id}Updated #if(${sourceInfo.wrapper}) | ${sourceInfo.id}.isValidOnStart()#end;
#end
#end
        return updated;
    }

    @OnParentUpdate("filterSubject")
    public void updated_filterSubject(${sourceClass} updated){
        filterSubjectUpdated = true;
    }
#end

#foreach($sourceInfo in $sourceMappingList)
#if(!${sourceInfo.constant})
    @OnParentUpdate("${sourceInfo.id}")
    public void updated_${sourceInfo.id}(${sourceInfo.type} updated){
        ${sourceInfo.id}Updated = true;
    }
#end
#end
#end
#if(${stateful})

    @AfterEvent
    public void resetAfterEvent() {
#if(${alwaysReset})
        f.reset();
#end
        if (reset) {
          reset();
        }
        reset = false;
    }
#end

    @Override
    public ${outputClass} event() {
        return result;
    }

    @Override
    public Class<${outputClass}> eventClass() {
        return ${outputClass}.class;
    }

    @Override
    public void reset(){
        result = null;
#if(${multiArgFunc})
        filterSubjectUpdated = ${sourceConstant};
#end
#if(${stateful})
        f.reset();
#end
        recalculate = true;
        reset = false;
    }

}

