## Velocity Template.
package ${functionPackage};

#foreach( $import in $imports)
import $import;
#end

/**
 * Fluxtion generated CSV decoder.
 *
 * target class  : ${targetClass}
 * 
 * @author Greg Higgins
 */

public class ${functionClass} implements RowProcessor<${targetClass}> {

    @Inject
    @Config(key = "id", value = "${id}")
    @PushReference
    public ValidationLogger errorLog;
    //buffer management
    private final char[] chars = new char[4096];
#if(${checksum})
    private final byte[] checksumBytes = new byte[2 * chars.length];
    private Checksum checksumCalc = new CRC32();
    //checksum field = ${checksumField}
#end
#if(!${fixedLen})
    private final int[] delimIndex = new int[1024];
    private final int[] delimIndexEmpty = new int[1024];
#end
    private StringBuilder msgSink = new StringBuilder(256);
    private final CharArrayCharSequence seq = new CharArrayCharSequence(chars);
    private int fieldIndex = 0;
    private int writeIndex = 0;
    //target
    private ${targetClass} target;
#foreach($sourceInfo in $sourceMappingList)
    //source field index: ${sourceInfo.fieldIndex}
    private final CharSequenceView ${sourceInfo.targetCalcMethodName} = seq.view();
#* *##if((${sourceInfo.indexField} || ${fixedLen}) && !${sourceInfo.duplicateField})
    private final int ${sourceInfo.fieldIdentifier} = ${sourceInfo.fieldIndex};
#*     *##if(${fixedLen})
    private final int ${sourceInfo.fieldLenIdentifier} = ${sourceInfo.fieldIdentifier} + ${sourceInfo.fieldLength} - 1;
#*     *##end
#* *##elseif(!${sourceInfo.duplicateField})
    private int ${sourceInfo.fieldIdentifier} = ${sourceInfo.fieldIndex};
#* *##end
#end
    //processing state and meta-data
#foreach($converter in ${convereters.entrySet()})
    @NoEventReference
    public ${converter.value} ${converter.key};
#end
#foreach($defaultValue in ${defaultValues.entrySet()})
    private final DefaultValue ${defaultValue.value.id} = new DefaultValue("${defaultValue.value.value}");
#end
    private int rowNumber;
    private final HashMap fieldMap = new HashMap<>();
#if($headerPresent)
    private static final int HEADER_ROWS = $headerLines;
#end
#if($mappingRowPresent)
    private static final int MAPPING_ROW = $mappingRow;
#end
#if($processEscapeSequences)
    private boolean escaping = false;
    boolean prevIsQuote = false;
#end
    private boolean passedValidation;

    @EventHandler
    @Override
    public boolean charEvent(CharEvent event) {
        final char character = event.getCharacter();
        passedValidation = true;
#if($ignore)
        if(character == '${ignore}'){
            return false;
        }
#end
#if($ignoreQuotes)
        if(character == '\"'){
            return false;
        }
#end
#if($processEscapeSequences)
        if(!processChar(character)){
            return false;
        }
        if (escaping) {
            chars[writeIndex++] = character;
            return false;
        }
#end
        if (character == '${eol}') {
            return processRow();
        }
#if(!${fixedLen})
        if (character == '${delimiter}') {
            updateFieldIndex();
        }
#end
        chars[writeIndex++] = character;
#if(${checksum})
        checksumBytes[writeIndex << 1] = (byte) ((character & 0xFF00) >> 8);
        checksumBytes[writeIndex << 1 + 1] = (byte) (character & 0x00FF);
#end
        return false;
    }

    @EventHandler
    @Override
    public boolean eof(EofEvent eof){
        return writeIndex==0?false:processRow();
    }

#if($processEscapeSequences)
    private boolean processChar(char character){
        boolean isQuote = character == '"';
        if (!escaping & isQuote) {//first quote
            prevIsQuote = false;
            escaping = true;
            return false;
        } else if (escaping & !prevIsQuote & isQuote) {//possible termination
            prevIsQuote = true;
            return false;
        } else if (escaping & prevIsQuote & !isQuote) {//actual termination
            prevIsQuote = false;
            escaping = false;
        } else if (escaping & prevIsQuote & isQuote) {//an escaped quote
            prevIsQuote = false;
        } 
        return true;
    }

#end
    private boolean processRow() {
        boolean targetChanged = false;
        rowNumber++;
#if($skipCommentLines)
        if(chars[0]!='#'){
#end
#if($headerPresent)
#* *##if($skipEmptyLines)
        if (HEADER_ROWS < rowNumber & writeIndex > 0) {
#* *##else
        if (HEADER_ROWS < rowNumber) {
#* *##end
            targetChanged = updateTarget();
        } #if($mappingRowPresent)else if(rowNumber==MAPPING_ROW){
            mapHeader();
        } #end

#* *##if(!$skipCommentLines)
        writeIndex = 0;
        fieldIndex = 0;
        return targetChanged;
#* *##end
#else
#* *##if($skipEmptyLines)
        if(writeIndex > 0){
            //updateTarget();
            targetChanged = updateTarget();
        }
#* *##else
            //updateTarget();
            targetChanged = updateTarget();
#* *##end
#* *##if(!$skipCommentLines)
        writeIndex = 0;
        fieldIndex = 0;
        return targetChanged;
#* *##end
#end
#if($skipCommentLines)
        }
        writeIndex = 0;
        fieldIndex = 0;
        return targetChanged;
#end
    }
#if($mappingRowPresent)

    private void mapHeader(){
        String header = new String(chars).trim();
#if($asciiOnlyHeader)
        header = header.replaceAll("\\P{InBasic_Latin}", "");
#end
        header = header.replace("\"", "");
        List<String> headers = new ArrayList();
        for (String colName : header.split("[${delimiter}]")) {
            headers.add(getIdentifier(colName));
        }
#foreach($sourceInfo in $sourceMappingList)
#* *##if(${sourceInfo.namedField})
        ${sourceInfo.fieldIdentifier} = headers.indexOf("${sourceInfo.fieldName}");
        fieldMap.put(${sourceInfo.fieldIdentifier}, "${sourceInfo.targetCalcMethodName}");
#*      *##if(${sourceInfo.mandatory})
        if (${sourceInfo.fieldIdentifier} < 0) {
            logHeaderProblem("problem mapping field:'${sourceInfo.fieldName}' missing column header, index row:", true, null);
        }
#*     *##end
#* *##end
#end
    }
#end

    private boolean updateTarget() {
#if($newTarget)
        target = new ${targetClass}();
#end
#if(${fixedLen})
        int length = 0;
#end
        try{
            updateFieldIndex();
#if($acceptPartials)
        int maxFieldIndex = fieldIndex;
#end
#foreach($sourceInfo in $sourceMappingList)
#* *##if($acceptPartials)
            if (maxFieldIndex > ${sourceInfo.fieldIdentifier}) {
#* *##end
            fieldIndex = ${sourceInfo.fieldIdentifier};
#*  *##if(${fixedLen})
         length = ${sourceInfo.fieldLenIdentifier};
         ${sourceInfo.targetCalcMethodName}.subSequenceNoOffset(${sourceInfo.fieldIdentifier}, ${sourceInfo.fieldLenIdentifier})#if($sourceInfo.trim).trim()#end;
#*  *##else
         #if(${sourceInfo.defaultOptionalField})
         if(fieldIndex > -1){
         ${sourceInfo.targetCalcMethodName}.subSequenceNoOffset(delimIndex[${sourceInfo.fieldIdentifier}], delimIndex[${sourceInfo.fieldIdentifier} + 1] - 1)#if($sourceInfo.trim).trim()#end;
         }else{
         ${sourceInfo.targetCalcMethodName}.subSequenceNoOffset(0, 0)#if($sourceInfo.trim).trim()#end;
         } 
         #elseif(${sourceInfo.mandatoryField})
         ${sourceInfo.targetCalcMethodName}.subSequenceNoOffset(delimIndex[${sourceInfo.fieldIdentifier}], delimIndex[${sourceInfo.fieldIdentifier} + 1] - 1)#if($sourceInfo.trim).trim()#end;
         #else
         if(fieldIndex > -1){
         ${sourceInfo.targetCalcMethodName}.subSequenceNoOffset(delimIndex[${sourceInfo.fieldIdentifier}], delimIndex[${sourceInfo.fieldIdentifier} + 1] - 1)#if($sourceInfo.trim).trim()#end;
         }
         #end
#*  *##end
         ${sourceInfo.updateTarget2}
#* *##if($acceptPartials)
        }
#* *##end

#end
#if(${eventMethod})
            target.${eventMethod}();
#end
#if(${checksum})
            calculateChecksum();
#end
        } catch (Exception e) {
#if(${fixedLen})
            logException("problem pushing '"
                    + seq.subSequence(fieldIndex, length).toString() + "'"
                    + " from row:'" +rowNumber +"'", false, e);
#else
            if ( delimIndex[fieldIndex] < 0 || delimIndex[fieldIndex+1] <0) {
                logException("problem getting data from row:'" + rowNumber + "' missing data", false, e);
            } else {
                logException("problem pushing '"
                    + seq.subSequence(delimIndex[fieldIndex], delimIndex[fieldIndex + 1] - 1).toString() + "'"
                    + " from row:'" +rowNumber +"'", false, e);
            }
#end
            passedValidation = false;
            return false;
        } finally {
            fieldIndex = 0;
            System.arraycopy(delimIndexEmpty, 0, delimIndex, 0, delimIndexEmpty.length);
        }
        return true;
    }

#if(${checksum})
    private void calculateChecksum(){
        checksumCalc.update(checksumBytes, 0, writeIndex << 1);
        long value = checksumCalc.getValue();
        target.${checksumField}(value);
        checksumCalc.reset();
    }
#end
    private void updateFieldIndex() {
#if(${fixedLen})
        //Do nothing fixed len
#else
        fieldIndex++;
        delimIndex[fieldIndex] = writeIndex + 1;
#end
    }

#if(${eventCompleteMethod})

    @OnEventComplete
    public void postProcess(){
        target.${eventCompleteMethod}();
    }
#end

    private void logException(String prefix, boolean fatal, Exception e) {
        errorLog.getSb().append("${functionClass} ")
                .append(prefix)
                .append(" fieldIndex:'")
                .append(fieldIndex)
                .append("' targetMethod:'${targetClass}#")
                .append(fieldMap.get(fieldIndex))
                .append("' error:'")
                .append(e.toString())
                .append("'")
                ;
        if(fatal){
            errorLog.logFatal("");
            throw new RuntimeException(errorLog.getSb().toString(), e);
        }
        errorLog.logError("");
    }

#if(!${fixedLen})
    private void logHeaderProblem(String prefix, boolean fatal, Exception e) {
        errorLog.getSb().append("${functionClass} ").append(prefix).append(rowNumber);
        if(fatal){
            errorLog.logFatal("");
            throw new RuntimeException(errorLog.getSb().toString(), e);
        }
        errorLog.logError("");
    }
#end

    @Override
    public ${targetClass} event() {
        return target;
    }

    @Override
    public Class<${targetClass}> eventClass() {
        return ${targetClass}.class;
    }

    @Initialise
    @Override
    public void init(){
        target = new ${targetClass}();
#if(!${fixedLen})
        Arrays.fill(delimIndexEmpty, -1);
        delimIndexEmpty[0] = 0;
#end
#foreach($sourceInfo in $sourceMappingList)
        fieldMap.put(${sourceInfo.fieldIdentifier}, "${sourceInfo.targetCalcMethodName}");
#end
    }

    @Override
    public boolean passedValidation() {
        return passedValidation;
    }

    @Override
    public int getRowNumber() {
        return rowNumber;
    }

    @Override
    public void setErrorLog(ValidationLogger errorLog) {
        this.errorLog = errorLog;
    }

#if ( ${outSrcList.size()} != 0 )
    public static String csvHeader(){
        String out = "";
#foreach($outInfo in $outSrcList)
        out += "${outInfo.headername}#if( $foreach.hasNext ),#end";
#end
        return out;
    }

  public static void asCsv(${targetClass} src, StringBuilder msgSink) throws IOException {
#foreach($outInfo in $outSrcList)
        msgSink.append(src.${outInfo.srcMethod}());
#if( $foreach.hasNext )msgSink.append(","); #end
#end
        msgSink.append("\n");
  }
  
  public static void asCsv(${targetClass} src, Appendable target) throws IOException {
        StringBuilder sb = new StringBuilder();
        asCsv(src, sb); 
        target.append(sb);
  }

    
    @Override
    public String csvHeaders(){
        return csvHeader();
    }

    @Override
    public void toCsv(${targetClass} src, Appendable target) throws IOException{
        msgSink.setLength(0);
        asCsv(src, msgSink);
        target.append(msgSink);
        msgSink.setLength(0);
  }
#end


#if(${csv})
  public static CsvRecordMarshaller marshaller(){
      return new CsvRecordMarshaller(new ${functionClass}());
  }

  public static void stream(StaticEventProcessor target, String input){
      CsvRecordMarshaller marshaller = marshaller();
      marshaller.handleEvent(new RegisterEventHandler(target));
      StringDriver.streamChars(input, marshaller);
      target.onEvent(EofEvent.EOF);
  }

  public static void stream(StaticEventProcessor target, File input) throws IOException {
      CsvRecordMarshaller marshaller = marshaller();
      marshaller.handleEvent(new RegisterEventHandler(target));
      CharStreamer.stream(input, marshaller).sync().stream();
      target.onEvent(EofEvent.EOF);
  }

  public static void stream(StaticEventProcessor target, File input, LogService validationLogger) throws IOException {
    CsvRecordMarshaller marshaller = marshaller();
    marshaller.init();
    marshaller.handleEvent(new RegisterEventHandler(target));
    marshaller.handleEvent(LogControlEvent.setLogService(validationLogger));
    CharStreamer.stream(input, marshaller).noInit().sync().stream();
    target.onEvent(EofEvent.EOF);
  }
#end
}


