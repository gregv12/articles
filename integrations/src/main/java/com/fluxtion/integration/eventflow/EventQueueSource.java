/*
 * Copyright (c) 2020, V12 Technology Ltd.
 * All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the Server Side Public License, version 1,
 * as published by MongoDB, Inc.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * Server Side Public License for more details.
 *
 * You should have received a copy of the Server Side Public License
 * along with this program.  If not, see 
 * <http://www.mongodb.com/licensing/server-side-public-license>.
 */
package com.fluxtion.integration.eventflow;

import com.fluxtion.api.lifecycle.Lifecycle;

/**
 * An EventSource that is polled by an external agent for any events to publish
 * to a supplied {@link EventConsumer}. The event consumer is provided in the {@link #start(com.fluxtion.integration.eventflow.EventConsumer)
 * }
 * callback. if the source has no events to send then it returns from the {@link #poll()
 * } call without invoking {@link EventConsumer#processEvent(java.lang.Object)
 * }.
 *
 * @author Greg Higgins greg.higgins@v12technology.com
 * @param <T>
 */
public interface EventQueueSource<T> extends Lifecycle {

    /**
     * A unique identifier for this {@link EventSource}
     *
     * @return identifier
     */
    String id();

    /**
     * Life-cycle method called after init has been successfully invoked
     *
     * @param target Target of events generated by this EventSource
     */
    void start(EventConsumer<T> target);

    /**
     * poll is called by a reader thread, the EventQueueSource should send any
     * events to the {@link EventConsumer} provided in the {@link #start(EventConsumer)
     * }
     * method.
     */
    void poll();

}
